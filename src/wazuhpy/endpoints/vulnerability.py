import json
import requests
from typing import Optional, List
from .endpoint import BaseEndpoint


class WazuhVulnerability(BaseEndpoint):
    def __init__(self, url: str, session: requests.Session, verify_ssl: bool = True):
        super().__init__(url, session, verify_ssl)

    def get(self, agent_id: str, pretty: bool = False, wait: bool = False,
            offset: int = 0, limit: int = 500, sort: str = None, search: str = None,
            select: List = None, query: str = None, distinct: bool = False, **kwargs):
        """
        Return the vulnerabilities of an agent

        :param agent_id: Agent ID. All possible values from 000 onwards
        :param pretty: Show results in human-readable format
        :param wait: Disable timeout response
        :param offset: First element to return in the collection
        :param limit: Maximum number of elements to return. Although up to 100.000 can be specified,
            it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded.
        :param sort: Sort the collection by a field or fields (separated by comma). Use +/- at the beggining
            to list in ascending or descending order. Use '.' for nested fields. For example, '{field1: field2}'
            may be selected with 'field1.field2'
        :param search: Look for elements containing the specified string. To obtain a complementary search,
            use '-' at the beginning
        :param select:  Select which fields to return (separated by comma). Use '.' for nested fields. For example,
            '{field1: field2}' may be selected with 'field1.field2'
        :param query: Query to filter results by. For example q="status=active"
        :param distinct: Look for distinct values.
        :other_param retry: can be bool or and instance of Retry
        :return: Response object
        """
        endpoint = f'{self.url}/vulnerability/{agent_id}'

        params = {'pretty': 'True' if pretty else None,
                  'wait_for_complete': 'True' if wait else None,
                  'offset': str(offset),
                  'limit': str(limit),
                  'sort': sort,
                  'search': search,
                  'q': query,
                  'distinct': 'True' if distinct else None}

        if select:
            params.update({'select': f"{','.join(select) if select is not None else ''}"})

        return self._do(http_method='GET', endpoint=endpoint, params=params, **kwargs)